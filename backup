#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_ROUTERS 2
#define NUM_LINES   11
#define LENGTH      30

struct dataline
{
    int this[NUM_ROUTERS];
    int source[NUM_LINES];
    int target[NUM_LINES];
    int end[NUM_LINES];
    char **str;
};

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *router(void *arguments)
{
    pthread_mutex_lock(&mutex);
    struct dataline *data = arguments;

    for (int i = 0; i < NUM_LINES; i++)
        printf("%d %d %s %d\n", data->source[i], data->target[i], data->str[i], data->end[i]);

    printf("%d\n", data->this[1]);

    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

void *processor(void *arguments)
{
    pthread_mutex_lock(&mutex);
    struct dataline *args = arguments;

    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

int main (void)
{
    FILE *file;
    struct dataline data;
    int total_columns = 4;
    char line[1024];
    pthread_t routers[NUM_ROUTERS], processors[NUM_ROUTERS];

    file = fopen("./input/listamensagens", "r");
    if (file == NULL) {
        printf("Error opening file!\n");
        return (1);
    }

    for (int i = 0; i < 2; i++)
        fgets(line, sizeof(line), file);

    data.str = malloc(NUM_LINES * sizeof(char*));
    for (int i = 0; i < NUM_LINES; i++)
        data.str[i] = malloc((LENGTH + 1) * sizeof(char)); 

    for (int i = 0; i < NUM_LINES; i++)
        fscanf(file, "%d %d \"%[^\"]\" %d", &data.source[i], &data.target[i], data.str[i], &data.end[i]);

    for (int i = 0; i < NUM_ROUTERS; i++) {
        data.this[i] = i;
        if (pthread_create(&routers[i], NULL, &router, (void *) &data)) {
            printf("Error creating ROUTER-%d!\n", i);
            return (1);
        }
        else
            printf("ROUTER-%d created!\n", i);
    }

    for (int i = 0; i < NUM_ROUTERS; i++) {
        if (pthread_create(&processors[i], NULL, &processor, (void *) &data)) {
            printf("Error creating PROCESSOR-%d!\n", i);
            return (1);
        }
        else
            printf("PROCESSOR-%d created!\n", i);
    }

    for (int i = 0; i < NUM_ROUTERS; i++) {
        pthread_join(routers[i], NULL);
        printf("ROUTER-%d finished!\n", i);
        pthread_join(processors[i], NULL);
        printf("PROCESSOR-%d finished!\n", i);
    }

    free(data.str);

    return (0);
}